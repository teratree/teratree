# Generated by Django 2.2.3 on 2019-08-02 16:37

# I had to split this into separate data and schema migrations because I got
# this error:
# cannot ALTER TABLE because it has pending trigger events
# This is described here:
# https://stackoverflow.com/questions/12838111/django-db-migrations-cannot-alter-table-because-it-has-pending-trigger-events
# In PostgreSQL you can't always insert/update data in the same transaction as a schema change


from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone

import json

# Import it this way to avoid
# AttributeError: 'ContentPage' object has no attribute 'add_child'
# See https://stackoverflow.com/questions/47288135/creating-child-paged-in-migrations-files
from homepage.models import ContentPage

# This might not be safe though, as described here:
# https://stackoverflow.com/questions/46594187/moving-wagtail-pages-in-a-migration
# We only get 'dummy' page objects in Wagtail migrations

def copy_experiment(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    Person = apps.get_model('experiment', 'Person')
    Experiment = apps.get_model('experiment', 'Experiment')
    ExperimentPage = apps.get_model('experiment', 'ExperimentPage')
    experiment_home = ContentPage.objects.get(slug='experiments')
    # print(experiment_home, dir(experiment_home))

    ContentType = apps.get_model('contenttypes.ContentType')
    ct, _ = ContentType.objects.get_or_create(model='ExperimentPage', app_label='experiment')

    for experiment in Experiment.objects.all():
        page = ExperimentPage(
            title = 'Experiment '+str(experiment.pk),
            draft_title = 'Experiment '+str(experiment.pk),
            slug = 'experiment-'+str(experiment.pk),
            content_type=ct,
            posted = experiment.posted,
            hypothesis = json.dumps([
                {'type': 'paragraph', 'value': experiment.hypothesis},
            ]),
            method = json.dumps([
                {'type': 'paragraph', 'value': experiment.method},
            ]),
            measurement = json.dumps([
                {'type': 'paragraph', 'value': experiment.measurement},
            ]),
            observation = json.dumps([
                {'type': 'paragraph', 'value': experiment.observation},
            ]),
            learning = json.dumps([
                {'type': 'paragraph', 'value': experiment.learning},
            ]),
            action = json.dumps([
                {'type': 'paragraph', 'value': experiment.action},
            ]),
            importance = experiment.importance,
            cost = experiment.cost,
            time_required = experiment.time_required,
            data_reliability = experiment.data_reliability,
            action_required = experiment.action_required,
            #name = experiment.poster.first_name + ' '+ experiment.poster.last_name,
            #email = experiment.poster.email,
            #user = experiment.poster.username,
        )
        experiment_home.add_child(instance=page)
        # page.save_revision().publish() 
        # page.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('experiment', '0009_auto_20190802_1427'),
    ]

    operations = [
        migrations.RunPython(copy_experiment),
        # migrations.RemoveField(
        #     model_name='experiencecomment',
        #     name='experience',
        # ),
        # migrations.RemoveField(
        #     model_name='experiencecomment',
        #     name='poster',
        # ),
        # migrations.RemoveField(
        #     model_name='experiment',
        #     name='parents',
        # ),
        # migrations.RemoveField(
        #     model_name='experiment',
        #     name='poster',
        # ),
        # migrations.RemoveField(
        #     model_name='experimentcomment',
        #     name='experiment',
        # ),
        # migrations.RemoveField(
        #     model_name='experimentcomment',
        #     name='poster',
        # ),
        # migrations.RemoveField(
        #     model_name='experimentrelatedexperience',
        #     name='experience',
        # ),
        # migrations.RemoveField(
        #     model_name='experimentrelatedexperience',
        #     name='experiment',
        # ),
        # migrations.RenameField(
        #     model_name='experimentpagecomment',
        #     old_name='author',
        #     new_name='name',
        # ),
        # migrations.RemoveField(
        #     model_name='experimentpagecomment',
        #     name='date',
        # ),
        # migrations.AddField(
        #     model_name='experimentpagecomment',
        #     name='email',
        #     field=models.EmailField(blank=True, default='', max_length=254),
        # ),
        # migrations.AddField(
        #     model_name='experimentpagecomment',
        #     name='posted',
        #     field=models.DateTimeField(default=django.utils.timezone.now),
        # ),
        # migrations.AddField(
        #     model_name='experimentpagecomment',
        #     name='user',
        #     field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experiment_page_comments', to=settings.AUTH_USER_MODEL),
        # ),
        # migrations.AlterField(
        #     model_name='experimentpage',
        #     name='poster',
        #     field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experiment_pages', to=settings.AUTH_USER_MODEL),
        # ),
        # migrations.DeleteModel(
        #     name='Experience',
        # ),
        # migrations.DeleteModel(
        #     name='ExperienceComment',
        # ),
        # migrations.DeleteModel(
        #     name='Experiment',
        # ),
        # migrations.DeleteModel(
        #     name='ExperimentComment',
        # ),
        # migrations.DeleteModel(
        #     name='ExperimentRelatedExperience',
        # ),
        # migrations.DeleteModel(
        #     name='Person',
        # ),
    ]
